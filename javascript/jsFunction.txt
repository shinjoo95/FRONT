자바스크립트 함수
1. 함수
- 어떤 목적을 가지고 작성한 코드를 모아 둔 블록문, 코드를 함수로 만들면 함수를 호출해 함수 내부에 모아 둔 여러 줄의 코드를 한 번에 실행할 수 있음.

2. 함수를 정의하는 방법
    - 함수 선언문으로 함수 정의하기 : function 키워드 다음에 함수를 식별할 수 있도록 식별자를 붙이면 됨. 식별자 뒤에는 소괄호(())를 붙임.
        - function 식별자(){}
            function gugudan(){
                for(let i = 1; i<=9; i++){
                    console.log(`3 * ${i} = ${3 * i}`);
                }
            }
    - 함수 표현식으로 함수 정의하기 : 함수는 객체에서 파생된 자료형이다. 자료형은 변수에 할당할 수 있어야 됨. 
                                따라서 함수도 변수에 할당할 수 있는데, 이를 이용한 함수 정의 방법을 함수 표현식이라 함. 
                                함수 표현식은 변수에 할당하는 함수에 식별자가 있으면 네이밍 함수, 없으면 익명 함수로 구분. 
                                const 변수명 = function(){};    //익명 함수
                                const 변수명 = function 식별자(){}; //네이밍 함수 
                                
                            - 함수 선언문으로 정의한 gugudan() 함수 표현식      
                                const gugudan = fuction gugudan(){
                                    for(let i = 1; i<=9; i++){
                                        console.log(`3 * ${i} = ${3 * i}`);
                                    }
                                };
                                gugudan();  //함수 호출   
                            - function 키워드 다음에 식별자가 없는 익명 함수도 함수를 호출하는 데 문제 없음
                                const gugudan = fuction(){
                                    for(let i = 1; i<=9; i++){
                                        console.log(`3 * ${i} = ${3 * i}`);
                                    }
                                };
                                gugudan();  //함수 호출  

    - 화살표 함수로 함수 정의하기 : ES6에서 추가된 함수 정의 방법으로, 화살표를 사용해 함수를 정의하는 방법
                             () => {};
                             화살표 함수는 익명 함수로만 정의할 수 있어서 함수를 호출하려면 정의된 함수를 변수에 할당하는 방법인 함수 표현식을 사용해야 됨
                                    const gugudan = () => {
                                    for(let i = 1; i<=9; i++){
                                        console.log(`3 * ${i} = ${3 * i}`);
                                    }
                                };
                                gugudan();  
                            - ES6가 지원되는 개발 환경에서는 가장 많이 사용되는 방법   

3. 함수 기능 확장하기 
    - 매개변수와 인수
        - 매개변수 : 함수를 정의할 때 외부에서 전달하는 데이터를 함수에서 받을 수 있도록 정의하는 변수 
        - 인수 : 정의한 함수를 호출할 때 소괄호 안의 전달하고 싶은 데이터, 함수의 매개변수에 자동으로 할당 
    - 매개변수의 특징
        - 명명 규칙 : 일반적으로 변수와 같다고 생각하면 됨. 변수의 특징을 그대로 가지고 있으므로 매개변수의 식별자도 변수의 식별자 명명 규칙에 따라 지어주면 됨
        - 데이터 전달 : 함수를 정의할 때 함께 정의한 매개변수는 함수 호출 시 전달되는 데이터와 일대일로 대응되어 데이터가 할당됨 
                      따라서 첫 번째 인수는 첫 번째 매개변수에 할당되고, 두 번째 인수는 두 번째 매개변수에 할당됨 
        - 기본값 할당 : ES6에서 기본값을 지정하는 방식이 추가됨. 매개변수에 직접 데이터를 할당하는 방식으로 단순하게 기본값을 지정할 수 있음. 
        - return 문 : 함수를 호출할 때 데이터를 전달하려면 매개변수를 정의해야 하듯이, 함수 외부로 데이터를 반환할 때는 return문을 사용해야 됨.

4. 함수의 특징 이해하기
    - 스코프 : 변수나 함수와 같은 참조 대상 식별자를 찾아내기 위한 규칙
        - 함수 스코프 : 함수에서 정의한 블록문만 스코프의 유효 범위로 인정하는 방식, 전역 스코프는 스코프와 상관없이 모두 참조 가능 
        - 블록 스코프 : 블록 스코프는 let, const 키워드에서만 발생하므로 같은 코드를 var 키워드로만 바꿔 실행하면 참조 오류가 발생하지 않음. 
                     var 키워드는 함수 스코프 방식으로만 스코프를 나누기 때문에 다음 코드에서는 변수 a,b 모두 전역 스코프에서 선언한 것과 같음
                        - 전역 스코프에 선언한 변수를 전역 변수, 지역 스코프에 선언한 변수를 지역 변수라고 함. 
        - 참조 우선순위 : 같은 스코프 영역에서 중복 선언이 불가능 함. 전역 스코프와 지역 스코프에 같은 식별자를 가지는 참조 대상이 있다면,
                        먼저 같은 지역 스코프의 식별자를 참조 함. 다음 같은 지역 스코프에서 참조할 식별자를 찾기 못할 때만 전역 스코프에서 찾음 
        - 함수 호이스팅 : 호이스팅은 코드를 선언과 할당으로 분리해 선언부를 자신의 스코프 최상위로 끌어올리는 것을 말함. 
                        단, 함수 표현식이나 화살표 함수를 let이나 const 키워드로 선언했다면 호이스팅 자체가 되지 않음. 
    

                            
                                
자바스크립트 기초 문법

1. 변수와 상수
    - 자바스크립트에서는 데이터를 저장하는 공간을 변수와 상수라고 함

    - 변수 : 변하는 수를 뜻함 
       식별자    표현식 <----값(30)
        ---   -------
    var num = 10 + 20;
    ---     --       --
   키워드    연산자     세미콜론 

    - 키워드 : 자바스크립트 프로그래밍 언어에서 어떤 역할이나 기능이 정해진 특별한 단어 (예약어)
    - 식별자 : 자바스크립트 내부에서 변수, 함수 등에 부여되는 이름을 의미 (변수명)
    - 연산자 : 연산 작업을 하는 데 사용하는 기호 (할당 연산자)
    - 표현식 : 평가(evaluation, 표현식을 실행해 하나의 값을 만드는 과정)되어 하나의 값을 반환하는 식 또는 코드를 의미
    - 값 : 더 이상 평가할 수 없는 데이터를 의미
    - 세미콜론 : 자바스크립트에서 하나의 문(statement, 문법)이 끝났음을 의미 
    - 선언, 할당, 초기화 : 변수를 생성하고 값을 저장하는 문법에서 var 키워드 등을 사용해 변수의 식별자를 지정하는 행위를 변수 선언이라 함.
                        할당 연산자인 = 기호로 우변에 있는 값을 변수 공간에 대입(저장)하는 것을 값을 할당한다 함. 
                        변수는 초기에 값을 할당하지 않고 선언만 할 수 있음. 

    - let : let 키워드는 ES6(자바스크립트 표준화인 ECMAScript의 6번째 버전)에서 새로 추가
        1. 변수명 중복이 불가능함 : var 키워드로 선언한 변수명은 중복해서 생성할 수 있음 
                                var num = 10 + 20;
                                var num = 50;

                                num이라는 공간이 다시 초기화되면서 기존에 할당된 데이터가 사라지고 50이라는 새로운 값이 할당 
                                그러나 let 키워드는 변수명을 중복 선언하지 못하게 해서 코드가 정상적으로 실행되지 않음.(오류 메세지 발생)

        2. 호이스팅이 되지 않음 : 호이스팅은 var 키워드로 변수를 선언하고 할당했을 때, 변수 선언을 자바스크립트의 스코프 맨 위로 올려 실행하는 것 
                                var num;    // 선언이 최상위로 올라옴
                                console.log(num);
                                num = 10;   // 할당은 원래 자리에 있음 

                                호이스팅에 의해 선언부가 최상위로 올라감, num이라는 변수를 출력할 때는 값이 없을 뿐, 선언은 된 상태라 오류가 발생하지 않음.
                                let 키워드는 호이스팅이 일어나지 않음, 같은 코드를 실행하면 num 변수가 정의되지 않았다는 오류가 발생 
                                
2. 상수 
- 변수를 선언할 때 사용하는 키워드로 const도 있음. const 키워드와 let 키워드라와 다른 점은, 재할당이 안 된다는 점이다.
  상수(constant)는 보통 변하지 않는 수를 의미하는데, const 키워드는 재할당이 안 되는 특징 때문에 상수 변수(constant variable)를 선언할 때 사용하는 키워드임.
                                const num; // 선언을 먼저 하고
                                num = 10;  // 할당을 나중에 해도 오류가 발생 

3. 식별자의 명명 규칙 
    - 강제적 식별자 명명 규칙

    규칙                                              불가능 예
    ------------------------------------------------------------------------------
    식별자에 키워드 사용 불가                              var, let, const 
    식별자에 공백 포함 불가                                my School, like food
    식별자의 첫 글자는 영문 소문자, _, $ 기호만 사용           *name, #age, @email 

    - 관용적 식별자 명명 규칙

    규칙                       좋은 예                      나쁜 예
    ------------------------------------------------------------------------------
    식별자는 영문으로만 작성        name, age                   이름, 나이
    식별자는 의미 있는 단어로 작성   name, age(이름과 나이 저장 시)   a,b(이름과 나이 저장 시)

    - 식별자 표기법 

    표기법                설명                          예
    ------------------------------------------------------------------------------
    카멜 표기법            변수명과 함수명 작성시 사용         firstName, lastName  
    언더스코어 표기법        상수명 작성 시 사용               FIRST_NAME, last_name
    파스칼 표기법           생성자 함수명 작성 시 사용         FirstName, LastName 

    - 카멜 표기법 : 마치 낙타의 혹처럼 글자 높이가 내려갔다가 올라간다고 해서 이름이 지어진 표기법, 
                 첫 글자는 영문 소문자로 시작하고, 2개 이상의 단어가 조합되면 각 단어의 첫 글자는 대문자로 표기 
                 주로 변수명이나 함수명, 객체의 속성명을 지을 때 사용
    - 언더스코어 표기법 : 2개 이상의 단어가 조합될 때, 각 단어를 _ 기호로 연결해 표기하는 방법, 상수의 식별자를 지을 때 사용
    - 파스칼 표기법 : 각 단어의 첫 글자를 대문자로 작성하는 방법, 자바스크립트에서 생상자 함수명을 지을 때 사용 

3. 자료형 
- 자바스크립트에서 사용할 수 있는 데이터의 종류를 의미, 기본 자료형과 참조 자료형으로 구분함. 
    - 기본 자료형 : 문자(string), 숫자(number), 논리(boolean), undefined, null, Symbol 
    - 참조 자료형 : 객체(object)
    
    - 문자열 : "Hello, Javascript" 나 'Hello, Javascript'처럼 큰따옴표나 작은따옴표로 둘러싸인 값의 형태를 의미 
    - 문자열 연결 연산자 : 먼자열 연결 연산자(+)는 덧셈 기호와 같음. 자바스크립트는 문자열과 문자열을 덧셈 기호로 연산하면 서로 연결되는 특징을 지님
        let string = '문자열' + " 연결 연산자";
        console.log(string);
        ==출력==
        문자열 연결 연산자
    - 이스케이프 문자 : 웹 브라우저가 사용자 의도와 다르게 문자열을 해석할 때 사용. 역슬래시(\)를 붙여 이스케이프 문자로 사용
                    웹 브라우저는 문자열에 들어 있는 큰따옴표나 작은따옴표에 역슬래시를 붙이면 일반적인 따옴표로 인식함.

        - 이스케이프 문자를 사용한 주요 기능

            이스케이프 문자 사용 시     설명
            --------------------------------
                \'                작은 따옴표
                \"                큰 따옴표
                \n                줄 바꿈
                \t                수평 탭
                \\                역슬래시 

    - 템플릿 문자열 : ES6에서 추가된 템플릿 문자열은 백틱(`)으로 문자열을 정의하는 방법 
                   템플릿 문자열은 기존 문자열 정의 방식처럼 큰따옴표나 작은따옴표로 문자열을 정의하지 않기 때문에 문자열에
                   큰따옴표나 작은따옴표가 있어도 영향을 받지 않음 
        - enter를 눌렀을 때 줄 바꿈이 적용됨. 이스케이프 문자를 사용하지 않아도 됨
            
            let string = `문자열은 큰따옴표(")나 
            작은따옴표(')로 감싸면 됩니다.`;
            console.log(string);
            
            ==출력==
            문자열은 큰따옴표(")나 
            작은따옴표(')로 감싸면 됩니다.

        - ${} 문법을 이용해 문자열에 변수 또는 식을 넣을 수 있음.

            let dan = 3;
            let gugu = 8;
            let string = `${dan} 곱하기 ${gugu}은 ${dan + gugu}입니다.`;
            console.log(string);

            ==출력==
            3 곱하기 8은 24입니다. 

    - 숫자형 : 정수와 실수를 구분하지 않고 전부 하나의 숫자 자료형(숫자형)으로 취급, 예를 들어 10이나 0.1이나 자바스크립트는 같은 숫자형임
    - 논리형 : 논리 자료형(논리형)은 참 또는 거짓에 해당되는 논리 값인 true, false를 의미, 논리형은 오직 두 값만 존재함. 
    - undefined : 변수나 상수를 컴퓨터 메모리 공간에 선언하면 반드시 생성한 공간에 저장할 데이터를 할당해야함. 
                  할당하지 않을 경우 자바스크립트 내부적으로 변수와 상수 공간에 임시로 데이터를 할당하는데, 이때 할당되는 값이 undefined
                  undefined는 다른 자료형과 다르게 사용자가 임의로 정의하고 할당하는 자료형이 아님 
    - null : null 값 하나만 있으며, 변수나 상수를 선언하고 의도적으로 선언한 공간을 비워 둘 때 할당.
    - 객체 : 자바스크립트의 핵심적인 자료형임. 앞에서 언급한 기본 자료형을 제외하고 자바스크립트에서 거의 모든 데이터와 자료구조는 객체라 봐도 무방함. 
            객체 자료형에서 파생되는 자료형으로 배열, 객체 리터럴, 함수가 있음. 
    - 배열 : 복수의 데이터를 정의할 수 있는 자료형 
        
        let studentScore = [80, 70, 90, 60]; // 국어, 영어, 수학, 과학 점수
        - 배열로 정의한 데이터를 요소라고 함, 배열 요소에 접근하려면 인덱스를 이용해야됨, 인덱스는 배열에서 각 데이터가 있는 위치를 가리키는 숫자라고 생각하면 됨
        
        let studentScore = [80, 70, 90, 60]; // 국어, 영어, 수학, 과학 점수
        console.log(studentScore[1]); // 70, 1번 인덱스의 데이터에 접근
        - 인덱스 숫자는 0부터 시작하므로 0번은 국어 점수, 1번은 영어 점수가 됨. 
          배열이 할당된 변수명에 대괄호를 이용해 인덱스 숫자를 넣으면 원하는 위치의 데이터에 접근 가능 
          
    - 객체 리터럴 : 객체를 정의하는 가장 간단한 방법, 객체를 정의할 때 중괄호({})를 사용하며, 중괄호 안에는 키와 값의 한쌍으로 이루어진 속성이 들어감
       
        {       속성
            --------------
            key1 : value1
            ----   -------
            키      값
            ----   -------
            key2 : value2
            --------------
                속성 
        }
        - 객체 리터럴로 정의한 객체는 배열보다 장점이 많은데, 그 중 하나의 값을 키로 구분함. 
    
        let studentScore = {
            koreanScore : 80,
            englishScore : 70,
            mathScore : 90,
            scienceScore : 60
        };
        console.log(studentScore.koreanScore);  //80
        console.log(studentScore['englishScore']);  //70

        ==출력==
        80
        70

4. 연산자 
- 어떤 연산을 처리하는 데 사용하도록 미리 정의된 기호를 자바스크립트에서는 연산자라고 함. 
  = 기호는 데이터를 할당하는 연산을 수행하기 때문에 할당 연산자라고 함. 

    - 산술 연산자 : 산술 연산자는 덧셈, 뺄셈, 곱셈, 나눗셈과 같은 수학 연산을 수행하는 연산자를 말함. 
    구분        연산자      예          설명
    ---------------------------------------------------------------------
    이항 산술    +        x + y        x에서 y를 더함
               -        x - y        x에서 y를 뺌
               *        x * y        x에서 y를 곱함
               /        x / y        x에서 y로 나눔
               %        x % y        x에서 y로 나누어 나머지를 구함 
               **       x ** y       x의 y 거듭제곱으로 구함
    
    단한 산술    ++       x++(후치연산)  x를 1 증가시킴.
                        ++x(전치연산)  
               --       x--(후치연산)  x를 1 감소시킴.
                        --x(전치연산)

    단항 부정    -        -x를          x의 부호를 부정합니다(음수->양수, 양수->음수)

    - 이항 산술 연산자 : 이항 산술 연산자는 연산을 수행하는 데 피연산자가 2개 필요한 연산자. 
    - 단항 산술 연산자 : 연산을 수행하는 데 피연산자가 1개만 필요한 연산자, 증감 연산자라고 함.
    - 단항 부정 연산자 : 항상 피연산자 앞에 위치하며 피연산자의 부호를 부정하는 연산을 수행
                     음수는 양수로 변환하고 양수는 음수로 변환하는 연산을 수행, 따라서 숫자형 데이터가 할당된 변수에만 사용 가능

    - 대입 연산자와 복합 대입 연산자 
    구분             연산자      예          설명
    ---------------------------------------------------------------------
    대입 연산자         =       x = y       x에 y를 대입함

    복합 대입 연산자    +=       x += y      x에 x+y 를 대입함
                    -=       x -= y      x에 x-y 를 대입함
                    *=       x *= y      x에 x*y 를 대입함
                    /=       x /= y      x에 x/y 를 대입함
                    %=       x %= y      x에 x%y 를 대입함
                    **=      x **= y     x에 x**y 를 대입함 

    - 비교 연산자 : 피연산자를 비교한 뒤, 논리형 값인 참(true), 거짓(false)을 반환하는 연산 수행 
    연산자              예          설명
    ---------------------------------------------------------------------
    ==             x == y        x와 y의 값이 같으면 true를 반환
    ===            x === y       x와 y의 값과 자료형이 같으면 true를 반환
    !=             x != y        x와 y의 값이 다르면 true를 반환
    !==            x !== y       x와 y의 값과 자료형이 다르면 true를 반환
    <              x < y         x가 y보다 작으면 true를 반환
    <=             x <= y        x가 y보다 작거나 같으면 ture를 반환
    >              x > y         x가 y보다 크면 true를 반환
    >=             x >= y        x가 y보다 크거나 같으면 true를 반환 

    - 논리 연산자 : 피연산자를 논리적으로 평가한 뒤, 조건에 맞는 피연산자를 반환하는 연산을 수행
    연산자              예          설명
    ---------------------------------------------------------------------
    &&             x && y        x가 참이면 y를 반환하고, 거짓이면 x를 반환
    ||             x || y        x가 참이면 x를 반환하고, 거짓이면 y를 반환
    !              !x            x가 참이면 false를 반환하고, 거짓이면 true를 반환 

    - 숫자형을 쓰거나 문자열을 쓰거나 전부 논리 값으로 평가함. 
      자료형 중 ""(빈 문자열), undefined, 0, null만 거짓으로 평가되고 나머지는 참으로 평가 
        - && : AND 연산자는 연산 결과가 거짓으로 평가되면 거짓으로 평가된 피연산자를 반환함 
        - || : OR 연산자는 피연산자를 왼쪽부터 평가해 참으로 평가된 피연산자를 즉시 반환 
        - !  : NOT 연산자는 피연산자나 식을 평가한 논리 값의 반대 값(true -> false, false -> true)을 반환 

    - 삼항 연산자 : 세 항 중 가장 왼쪽에 있는 피연산자의 참, 거짓에 따라 나머지 두 항에 있는 피연산자를 선택적으로 반환하는 연산을 수행 
    연산자              예          설명
    ---------------------------------------------------------------------
    ?:              x ? y : z     x가 참이면 y를 반환하고, x가 거짓이면 z를 반환 

    - 형 변환 : 형 변환은 데이터의 자료형이 다른 자료형으로 바뀌는 것을 말함. 
        - 암시적 형 변환 : 암시적 형 변환은 사용자가 형 변환을 의도하지 않았지만, 자바스크립트에서 자체적으로 형 변환한 것을 말함. 
                        서로 다른 자료형 데이터를 + 기호로 연산하므로 숫자형 데이터를 문자열 데이터로 암시적 형 변환해서 연산을 수행
        - 명시적 형 변환 :  String() 메서드를 사용하면 문자열을 숫자형으로 명시적 형 변환을 할 수 있음. 

5. 조건문 다루기

    - if문 : if 뒤에 오는 소괄호(()) 안의 조건식이 참으로 평가되면 중괄호 안의 코드를 실행하는 조건문 
             조건식은 숫자를 써도, 문자열을 써도, undefined, null을 써도 무조건 참/거짓으로 평가 
                if(조건식){
                    //조건식이 참이면 실행
                }
    - else문 : if문의 조건식이 거짓일 때 실행되는 블록문을 정의 
                if(조건식){
                    //조건식이 참이면 실행
                }else{
                    //조건식이 거짓이면 실행 
                } 
    - else if문 : if문에 조건을 추가하고 싶을 때 사용 
                if(조건식 1){
                    //조건식1이 참이면 실행
                }else if(조건식 2){
                    //조건식2이 거짓이면 실행 
                }else{
                    //조건식이 모두 거짓이면 실행 
                } 
    - switch 문 : switch 뒤에 오는 소괄호 안의 값과 일치하는 case 문이 있을 때 해당 코드를 실행하는 조건문 
                switch(key){
                    case value1:
                    // key가 value1일 때 실행할 블록문
                        break;
                    case value2:
                    // key가 value2일 때 실행할 블록문 
                        break;
                    default:
                    // 아무것도 일치하지 않을 때 실행할 블록문
                        break;    
                }
    - if / switch 문 : 두 조건문의 차이는 조건의 형태임, if문은 조건에 식을 사용하고, switch문은 조건의 값을 사용함. 
                - if 문
                let score = 90;
                if(score >= 90 && score < 100){
                    console.log("A++ 학점");
                }

                - switch 문
                let score = 90;
                switch(score){
                    case 90:
                    .
                    .
                    case 98:
                    case 99:
                        console.log("A++ 학점");
                        break;
                    defalut:
                        break;
                }
        - switch 문은 조건으로 값을 받기 때문에 값이 범위일 때는 모든 값을 일일이 case 문으로 정의해야 됨
            따라서 범위를 이용한 조건을 작성할 때는 if 문이 적합함. 그러나 값이 하나일 때는 switch문이 더 적합함 

6. 반복문 다루기
- 반복문은 지정한 조건이 참(true)으로 평가되는 동안 지정한 블록문을 반복해서 실행하는 문법. 반복문에는 대표적으로 while, do...while, for문이 있음

    - while문 
        while(조건식){
            // 조건식이 참이면 실행 
        }
    - 무한 반복문
        let num = 1;
        while(num <= 9999){
            console.log(num);
            num++; //코드가 한 번 반복될 때마다 num 변수를 1씩 증가시킴 
        }
    - do...while 문 : 특정 조건이 참으로 평가되는 동안 do 다음에 오는 블록문을 반복 실행 
        do{
            //블록문
        }while(조건식);
    - for 문 : 횟수를 지정해 지정한 횟수가 끝날 때까지 블록문을 반복 실행하는 반복문으로, 조건식과 증감식이라는 실행 구조로 되어 있음
        for(초깃값; 조건식; 증감식){
            //블록문
        }
        - 초깃값 -> 조건식 -> 블록문(조건식이 참일 경우) -> 증감식 -> 조건식 순으로 실행 
    - for 문과 배열 : 횟수를 지정하는 반복문이라는 특징 때문에 배열과 같은 자료형을 반복 횟수 용도로 사용할 수 있음.
        let arr = ["banana", "apple", "orange"];
        for(let i = 0; i < arr.length; i++){
            console.log(arr[i]);
        }
        - 배열에 length 속성을 사용하면 배열의 데이터 개수를 확인할 수 있음 
    - for ...in 
        for(가변수 in 배열 / 객체 리터럴){
            //블록문
        }
        - for 문의 소괄호 안에 in 키워드를 두고 키워드의 오른쪽에는 탐색의 대상이 되는 배열 또는 객체 리터럴, 
          왼쪽에는 배열 또는 객체 리터럴을 탐색해서 키를 지정할 가변수를 놓음. 
    - break 문 : 종료 조건을 만족하지 않아도 인위적으로 반복문을 종료하는 방법 , 어떠한 반복문이라도 break문을 만나면 반복문 종료. 
        for(let i = 0; i<10; i++)}{
            console.log(i);
            if(i==5) break;
        }
        - 5가 되는 순간 break문이 실행되어 반복문이 종료 
    - continue 문 : 반복문을 건너뛰고 실행하라는 명령, 반복문의 블록문에서 continue 문을 만나면 해당 반복 실행만 건너뛰게 됨
        for(let i =1; i<=10; i++){
            if(i % 2 === 1) continue;
            console.log(i);
        }                
        ==출력==
        2
        4
        6
        8
        10